name: Deploy Non-Production Backend Service

run-name: "Run Workflow: ${{ github.ref_name }}"

on:
  workflow_call:
    inputs:
      label-runner:
        default: ubuntu-latest
        type: string
        description: "The label of the runner to execute the workflow"
      argocd-repoitory:
        type: string
        required: true
        description: "The repository URL of ArgoCD"
      argocd-config-path:
        type: string
        required: true
        description: "The path to the ArgoCD configuration files"
      argocd-hostname:
        type: string
        required: true
        description: "The hostname of the ArgoCD server"
      argocd-username:
        type: string
        required: true
        description: "The username for authenticating with ArgoCD"
      argocd-app-name:
        type: string
        required: true
        description: "Names of the applications in ArgoCD, e.g., ['app1']"
      argocd-cli-enable:
        type: string
        default: 'true'
        description: "Flag indicating whether to use argocd CLI"
      argocd-sync:
        type: string
        default: 'true'
        description: "Flag indicating whether to sync the application in ArgoCD"
      argocd-wait:
        type: string
        default: 'true'
        description: "Flag indicating whether to wait for the sync operation to complete in ArgoCD"
      ecr-registry:
        type: string
        required: true
        description: "The registry of the ECR"
      ecr-repository:
        type: string
        required: true
        description: "The name of the ECR repository"
      trivy-s3-enable:
        type: string
        default: 'true'
        description: "Flag indicating whether to enable S3 for Trivy scan results"
      trivy-bucket-name:
        type: string
        description: "The name of the S3 bucket for Trivy scan results"
      trivy-enable:
        type: string
        default: 'true'
        description: "Flag indicating whether to enable Trivy vulnerability scanning"
      trivy-artifact-enable:
        type: string
        default: 'true'
        description: "Flag indicating whether to enable github artifact for Trivy scan results"
      trivy-severity:
        type: string
        default: 'CRITICAL,HIGH'
        description: "The severity levels of vulnerabilities to consider in Trivy scan"
      trigger-workflow-enable:
        type: string
        required: true
        description: "Flag indicating whether to trigger another workflow"
      trigger-target:
        type: string
        description: "The target repository for triggering another workflow"
      services-name:
        type: string
        required: true
        description: "The name of the service to trigger in the target repository"
      java-version:
        type: string
        default: '17'
        description: "The version of Java to use for validation and build"
      java-format-enable:
        type: boolean
        default: true
        description: "Flag indicating whether to enable java format"
      unit-test-enable:
        type: boolean
        default: true
        description: "Flag indicating whether to enable unit-test"
      maven-version:
        type: string
        default: '3.9.4'
        description: "The version of Maven to use for validation and build"
      environment:
        type: string
        description: "The environment where the service will be deployed"
      slack-channel:
        type: string
        required: true
        description: "The Slack channel to notify about workflow status"
      code-quality-enable:
        type: boolean
        default: false
        description: "Enable or disable the code quality analysis using SonarQube."
      container-sonarqube:
        type: string
        description: "Container sonarqube"
        default: 654654479736.dkr.ecr.me-central-1.amazonaws.com/sonarqube-scan-action:10.0-ubuntu-24.04-3
    secrets:
        github-app-id:
          required: true
          description: "The GitHub App ID for authentication"
        github-app-private-key:
          required: true
          description: "The private key of the GitHub App for authentication"
        slack-webhook:
          required: true
          description: "The webhook URL for Slack notifications"
        argocd-password:
          required: true
          description: "The password for authenticating with ArgoCD"
        github-pat:
          description: "The GitHub Personal Access Token for authentication"

jobs:
  commitlint:
    name: Commitlint
    runs-on: ${{ inputs.label-runner }}
    steps:
      - name: Commitlint
        uses: nxz-group/github-shared-workflows/.github/actions/commitlint@main

  validate:
    name: Java Validate
    needs:
      - commitlint
    uses: nxz-group/github-shared-workflows/.github/workflows/function-validate-java-old.yaml@main
    with:
      java-version: ${{ inputs.java-version }}
      maven-version: ${{ inputs.maven-version }}
      label-runner: ${{ inputs.label-runner }}
      java-format-enable: ${{ inputs.java-format-enable}}
      unit-test-enable: ${{ inputs.unit-test-enable}}

  build:
    name: Build/Push Image
    needs:
      - commitlint
      - validate
    runs-on: ${{ inputs.label-runner }}
    outputs:
      image-tag: ${{ steps.init-variable.outputs.image-tag }}
    steps:
      - name: Initial variable
        id: init-variable
        uses: nxz-group/github-shared-workflows/.github/actions/generate-tag@main
        with:
          environment: ${{ inputs.environment }}
          ecr-registry: ${{ inputs.ecr-registry }}
          ecr-repository: ${{ inputs.ecr-repository }}

      - name: Build Application
        id: build-app
        uses: nxz-group/github-shared-workflows/.github/actions/build-docker-image@main
        with:
          image-name: ${{ steps.init-variable.outputs.image-full-name }}
          ecr-repository: ${{ inputs.ecr-repository }}

      - name: Run Trivy Vulnerability Scan
        if: inputs.trivy-enable == 'true'
        uses: nxz-group/github-shared-workflows/.github/actions/trivy-security-scan@main
        with:
          environment: ${{ inputs.environment }}
          image-ref: ${{ steps.init-variable.outputs.image-full-name }}
          severity: CRITICAL
          exit-code: 1
          upload-artifact-enable: false

      - name: Generate Trivy Report
        if: inputs.trivy-enable == 'true' && always()
        uses: nxz-group/github-shared-workflows/.github/actions/trivy-security-scan@main
        with:
          environment: ${{ inputs.environment }}
          image-ref: ${{ steps.init-variable.outputs.image-full-name }}
          s3-bucket: ${{ inputs.trivy-bucket-name }}
          upload-result-s3-enable: ${{ inputs.trivy-s3-enable }}
          severity: ${{ inputs.trivy-severity }}
          exit-code: 0
          upload-artifact-enable: ${{ inputs.trivy-artifact-enable }}

      - name: Push image to ECR
        uses: nxz-group/github-shared-workflows/.github/actions/push-docker-image@main
        with:
          image-name: ${{ steps.init-variable.outputs.image-full-name }}

  update-tag:
    name: Update Image Tag
    needs:
      - build
    runs-on: ${{ inputs.label-runner }}
    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.github-app-id }}
          private_key: ${{ secrets.github-app-private-key }}

      - name: Update Image Tag
        uses: nxz-group/github-shared-workflows/.github/actions/update-image-tag@main
        with:
          argocd-repo: ${{ inputs.argocd-repoitory }}
          image-tag: ${{ needs.build.outputs.image-tag }}
          argocd-configs-path: ${{ inputs.argocd-config-path }}
          environment: ${{ inputs.environment }}
          github-token: ${{ steps.generate-token.outputs.token }}   

  deploy:
    name: Deploy Service
    needs:
      - build
      - update-tag
    runs-on: ${{ inputs.label-runner }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        experimental: [true]
        app-name: ${{ fromJSON(inputs.argocd-app-name) }}
    if: inputs.argocd-cli-enable == 'true'
    steps:
      - name: ArgoCD sync and wait
        uses: nxz-group/github-shared-workflows/.github/actions/argocd-sync-wait@main
        with:
          hostname: ${{ inputs.argocd-hostname }}
          username: ${{ inputs.argocd-username }}
          password: ${{ secrets.argocd-password }}
          app-name: ${{ matrix.app-name }}
          sync-status: ${{ inputs.argocd-sync }}
          wait-status: ${{ inputs.argocd-wait }}
    
  trigger-automate-test:
      name: Trigger Automated Test Workflow
      needs:
        - build
        - deploy
      runs-on: ${{ inputs.label-runner }}
      if: inputs.trigger-workflow-enable == 'true'
      steps:
      - name: Trigger workflow
        uses: nxz-group/github-shared-workflows/.github/actions/trigger-workflow@main
        with:
          repo-name: ${{ inputs.trigger-target }}
          service-name: ${{ inputs.services-name }}
          image-tag: ${{ needs.build.outputs.image-tag }}
          github-token: ${{ secrets.github-pat }}

  notify:
    name: Notification
    if: always()
    needs:
      - deploy
    runs-on: ${{ inputs.label-runner }}
    permissions:
      actions: read
    steps:
      - name: Notify Slack
        uses: nxz-group/github-shared-workflows/.github/actions/slack-notification@main
        with:
          slack-webhook: ${{ secrets.slack-webhook }}
          slack-channel: ${{ inputs.slack-channel }}
          github-token: ${{ secrets.GITHUB_TOKEN }}